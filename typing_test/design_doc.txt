Text File questions



Problem 01: Sample Paragraphs



- Which functions from utils.py will you use for interacting with the sample_paragraphs.txt file?





Problem 02: Words Per Minute



- Given a long string that contains a full paragraph (e.g. "This is my name. It is Bob. Also, I have a cat named Troy."), what function will you use to separate a string containing a full paragraph into its individual words?





- What is the calculation you will use in order to measure Words Per Minute speed? (You can describe your formula.)





- What is the calculation you will use in order to measure accuracy? (You can describe your formula.)




Problem 03: Pig Latin



- How will you identify that a word starts with a consonant cluster? 





Problem 04: Autocorrect Skeleton



- How will you calculate the difference scores between the user input string and each valid word, and determine which difference is the smallest?





Problem 05: Score Function 



- What will your base case be?





- Identify two example inputs which fall into different recursive calls. In each of these cases, what recursive call should be made?





Problem 06: 



- What does each of the recursive calls in the skeleton represent? Are there additional cases which don't fit into the three already given?





- If we called score_function("bot", "boot"), list a series of successive recursive calls we would go through to reach the base case. For example, if we called score_function("add", "aadd"), one step could be score_function("add", "aadd") -> score_function("add", "add").





- Based on your above list of recursive calls, classify each step as an add, remove, a swap, or something else.





- Why would your function choose this sequence of recursive calls over another?


Problem 07: Accuracy



- In your own words, why do we need to improve the accuracy of our existing score_function? In other words, what is the problem that we are trying to solve?





- How can you adapt your score function from the previous problem to take into account key distances?
 (Hint: which recursive call will need to be modified?)





Problem 08: Efficiency



- What data structure will you use to store all of the differences that score_function has already calculated?





- What types of values will this data structure contain?





- Using the data structure you described, given a pair of words, how will you check whether score_function has already been called on that pair of words? If so, how will you access the already calculated difference?

questionAnswers:
	01: I would first use readalbe() for reabaility, readlines() forg getting list of each line.
	02: split() for saperate into words; Word per minutes: (totalWords/seconds)*(60s/minutes); Accuray percentage: 1 - (#incorrect)/ #words typed 
	03: I would create a consonant[], then examine the target[0] see if it appears; 
	04: see user_input as a single word and search out the word_list[], by comparing length of String and number of same characters to determine the smallest term.
	05: First case score_function("eat", "eato") -> it requires 1 operation to fix so return 1 score; Second case score_function("yoga", "gaga") it requires two replacement oepration so return score of 2.
	06: The first represents the first represents if they are the same, two and three is when it requires operations. For additional cases, if there is extra or less character. remove the first letter. We choose recursive call is since it more efficent to add and remove elements
	07: Becuase there is many problem about grader of the score function,. If there is additional mis-typing letter with space after, the function might just pass it as wrong word and so the next and next, it turns out score become much lesser than reality. We have to figure out the key distance to examine them correctly.
	08: Array, Dictionary. dictionary = ("root": 1, "eato": -1, "ha": 0) if it is 0 which means have not been called by score_function and vise versa
